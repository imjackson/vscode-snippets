{
    // javascript.json
    // JavaScript specific user snippets

    // LOOPS

    "For loop": {
        "prefix": "fl",
        "body": ["for (let ${1:i} = ${2:0}; ${1:i}$3; ${1:i}$4) {\n\t$0\n}"],
        "description": "Basic for loop"
    },

    "While loop": {
        "prefix": "wl",
        "body": ["while (${1:condition}) {\n\t$0\n}"],
        "description": "Basic for loop"
    },

    "Do...while loop": {
        "prefix": "dwl",
        "body": ["do { \n\t$0\n} while (${1:condition})"],
        "description": "Basic for loop"
    },

    "For...in loop": {
        "prefix": "fil",
        "body": ["for (let ${1:name} in ${2:iterable}) {\n\t$0\n}"],
        "description": "Basic for loop"
    },

    "For...of loop": {
        "prefix": "fol",
        "body": ["for (let ${1:value} of ${2:iterable}) {\n\t$0\n}"],
        "description": "Basic for loop"
    },

    // DESTRUCTURING

    "Destructure object": {
        "prefix": "dco",
        "body": ["const { ${1:values} } = ${2:object}"],
        "description": "Destructure object statement"
    },

    "Destructure array": {
        "prefix": "dca",
        "body": ["const [ ${1:values} ] = ${2:array}"],
        "description": "Destructure array statement"
    },

    // OTHER

    "Arrow Function": {
        "prefix": "arrow",
        "body": ["$1 = ($2) => {", "\t$0", "}"],
        "description": "Basic arrow function"
    },

    "Map": {
        "prefix": "maparray",
        "body": ["${1:array}.map(($2, index) => {$0})"],
        "description": "Map with currentValue and index"
    },

    "Simple Map": {
        "prefix": "simplemaparray",
        "body": ["${1:array}.map(${2:arr} => $0)"],
        "description": "Map with only currentValue"
    },

    "SetTimeout": {
        "prefix": "functimeout",
        "body": ["setTimeout(() => {", "\t${1:func}", "}, ${2:2000})"],
        "description": "Implements setTimeout() around a function"
    }
}
