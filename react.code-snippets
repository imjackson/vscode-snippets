{
    // react.code-snippets
    // React.js specific user snippets

    "React-Component": {
        "prefix": "react-component",
        "scope": "javascript, javascriptreact",
        "body": [
            "import React from 'react'",
            "",
            "export default class ${1:ClassName} extends React.Component {",
            "\tconstructor(props) {",
            "\t\tsuper(props)",
            "\t\tthis.state = {}",
            "\t}",
            "",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div></div>",
            "\t\t)",
            "\t}",
            "}"
        ],
        "description": "React class component"
    },

    "Functional Component": {
        "prefix": "functional",
        "scope": "javascript, javascriptreact",
        "body": [
            "import React from 'react'",
            "\nconst ${1:func} = (props) => {",
            "\treturn <${2:div}>$0</${2:div}>",
            "}",
            "\nexport default ${1:func}"
        ],
        "description": "Functional component"
    },

    "This.Bind": {
        "prefix": "jsbind",
        "scope": "javascript, javascriptreact",
        "body": ["this.${1:func} = this.${1:func}.bind(this)"],
        "description": "Bind function to 'this'"
    },

    "Constructor": {
        "prefix": "struct, javascriptreact",
        "scope": "javascript, javascriptreact",
        "body": [
            "constructor(props) {",
            "\tsuper(props)",
            "\tthis.state = { $0 }",
            "}"
        ],
        "description": "Class component constructor"
    },

    "React Element": {
        "prefix": "elem-react",
        "scope": "javascript, javascriptreact",
        "body": ["<$1 className={ $2 }>$0</$1>"],
        "description": "React-html element with className attribute"
    },

    "Ternary Styles": {
        "prefix": "ternstyle",
        "scope": "javascript, javascriptreact",
        "body": ["style={ $1 ? $2 : $3 }$0"],
        "description": "Style attribute with ternary operator"
    },

    "OnChange Handler": {
        "prefix": "onchangehandler",
        "scope": "javascript, javascriptreact",
        "body": [
            "changeHandler = (e) => {",
            "\tconst {name, value} = e.target",
            "\tthis.setState({",
            "\t\t[name]: value",
            "\t})",
            "}"
        ],
        "description": "Basic changeHandler for name and value"
    },

    "Conditional Render": {
        "prefix": "conditionalrender",
        "scope": "javascript, javascriptreact",
        "body": ["{ ${1:condition} ? ", "\t${2:<Component />}", " : null }"],
        "description": "Conditionally renders component based on single boolean state"
    },

    "Input Attributes": {
        "prefix": "inputattrs",
        "scope": "javascript, javascriptreact",
        "body": ["name='$1' value={$2} onChange={$3} placeholder='$4' $0"],
        "description": "Creates row of standard input attributes"
    },

    "Deconstructed State": {
        "prefix": "deconstate",
        "scope": "javascript, javascriptreact",
        "body": ["const { ${1:values} } = this.state"],
        "description": "Creates const for deconstructed state values"
    },

    "Deconstructed Context": {
        "prefix": "deconcontext",
        "scope": "javascript, javascriptreact",
        "body": ["const { ${1:values} } = this.context"],
        "description": "Creates const for deconstructed context values"
    },

    "File Header": {
        "prefix": "fileheader",
        "scope": "javascript, javascriptreact",
        "body": [
            "// ============================================================",
            "// ${1:filename.js}",
            "//",
            "// ${2:file description}",
            "// ============================================================"
        ],
        "description": "Creates js/jsx comment file header"
    }
}
