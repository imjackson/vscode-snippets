{
    // react.code-snippets
    // React.js specific user snippets

    // BASIC METHODS

    "Import": {
        "prefix": "imp",
        "scope": "javascript, javascriptreact",
        "body": ["import ${1:React} from '${2:react}'"],
        "description": "Import statement - defaults to importing React"
    },

    "Import Deconstructed": {
        "prefix": "impd",
        "scope": "javascript, javascriptreact",
        "body": ["import { ${1:Component} } from '${2:package}'"],
        "description": "Import statement deconstructed"
    },

    "Export const": {
        "prefix": "expc",
        "scope": "javascript, javascriptreact",
        "body": ["export const $0"],
        "description": "Export const statement"
    },

    "Export default": {
        "prefix": "expd",
        "scope": "javascript, javascriptreact",
        "body": ["export default ${1:Component}"],
        "description": "Export default statement"
    },

    // COMPONENTS

    "Class Component": {
        "prefix": "class-component",
        "scope": "javascript, javascriptreact",
        "body": [
            "class ${1:ClassName} extends React.Component {",
            "\tconstructor(props) {",
            "\t\tsuper(props)",
            "\t\tthis.state = {}",
            "\t}",
            "",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>$0</div>",
            "\t\t)",
            "\t}",
            "}",
            "\n${2:export default ${1:ClassName}}"
        ],
        "description": "React class component"
    },

    "Functional Component": {
        "prefix": "functional",
        "scope": "javascript, javascriptreact",
        "body": [
            "const ${1:func} = (${2:props}) => {",
            "\treturn (<${4:div}>$0</${4:div}>)",
            "}",
            "\n${3:export default ${1:func}}"
        ],
        "description": "React functional component"
    },

    "Stateless Functional Component": {
        "prefix": "stateless",
        "scope": "javascript, javascriptreact",
        "body": [
            "const ${1:func} = (${2:props}) => (",
            "\t<${4:div}>$0</${4:div}>",
            ")",
            "\n${3:export default ${1:func}}"
        ],
        "description": "React stateless functional component"
    },

    // HOOKS

    "useEffect": {
        "prefix": "useEffect",
        "scope": "javascript, javascriptreact",
        "body": ["useEffect(() => {", " \t$0", "})"],
        "description": "Creates useEffect hook implementation"
    },

    "useState": {
        "prefix": "useState",
        "scope": "javascript, javascriptreact",
        "body": ["const [${1:state}, ${2:setState}] = useState(${3:false})"],
        "description": "Creates useState hook implementation"
    },

    "useContext": {
        "prefix": "useContext",
        "scope": "javascript, javascriptreact",
        "body": ["const { ${1} } = useContext(${2})"],
        "description": "Creates useContext hook implementation"
    },

    // OTHER

    "React Element": {
        "prefix": "elem-react",
        "scope": "javascript, javascriptreact",
        "body": ["<$1 className={ $2 }>$0</$1>"],
        "description": "React-html element with className attribute"
    },

    "Ternary Styles": {
        "prefix": "ternstyle",
        "scope": "javascript, javascriptreact",
        "body": ["style={ $1 ? $2 : $3 }$0"],
        "description": "Style attribute with ternary operator"
    },

    "OnChange Handler": {
        "prefix": "onchangehandler",
        "scope": "javascript, javascriptreact",
        "body": [
            "changeHandler = (e) => {",
            "\tconst {name, value} = e.target",
            "\tthis.setState({",
            "\t\t[name]: value",
            "\t})",
            "}"
        ],
        "description": "Basic changeHandler for name and value"
    },

    "Conditional Render": {
        "prefix": "conditionalrender",
        "scope": "javascript, javascriptreact",
        "body": ["{ ${1:condition} && ", "\t${2:<Component />} }"],
        "description": "Conditionally renders component based on single boolean state"
    },

    "Input Attributes": {
        "prefix": "inputattrs",
        "scope": "javascript, javascriptreact",
        "body": ["name='$1' value={$2} onChange={$3} placeholder='$4' $0"],
        "description": "Creates row of standard input attributes"
    },

    "Deconstructed State": {
        "prefix": "deconstate",
        "scope": "javascript, javascriptreact",
        "body": ["const { ${1:values} } = this.state"],
        "description": "Creates const for deconstructed state values"
    },

    "Deconstructed Context": {
        "prefix": "deconcontext",
        "scope": "javascript, javascriptreact",
        "body": ["const { ${1:values} } = this.context"],
        "description": "Creates const for deconstructed context values"
    },

    "File Header": {
        "prefix": "fileheader",
        "scope": "javascript, javascriptreact",
        "body": [
            "// ============================================================",
            "// ${1:filename.js}",
            "//",
            "// ${2:file description}",
            "// ============================================================"
        ],
        "description": "Creates js/jsx comment file header"
    }
}
